{"version":3,"sources":["App.module.css","components/Button/Button.tsx","bll/counter-reducer.ts","components/Counter/Counter.tsx","bll/counterSetter-reducrer.ts","components/CounterSetter/CounterSetter.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["module","exports","Button","props","className","s","button","onClick","onClickHandler","disabled","title","InitialState","message","score","onFocusHandler","disInc","disRes","styleMessage","scoreAC","type","messageAC","onFocusHandlerAC","onOff","disIncAC","disResAC","styleMessageAC","Counter","dispatch","useDispatch","minValue","useSelector","state","counterSetter","maxValue","counter","scoreColor","ScoreboardRed","ScoreboardBlack","useEffect","errorText","enterText","JSON","stringify","ButtonsIncAndRes","ButtonsContainer","totalScoreError","totalScore","disable","setMaxValueToLSAC","getMaxValueFromLSAC","setMinValueToLSAC","getMinValueFromLSAC","disValueAC","CounterSetter","onFocusMessage","onBlurMessage","minInputStyle","startValueErrorInput","startValueInput","equalValueInputStyle","errorMaxValue","Scoreboard","onFocus","onBlur","onChange","e","getState","currentValue","currentTrueValue","localStorage","setItem","setMaxValueToLSTC","parse","currentTarget","value","startValue","setMinValueToLSTC","ButtonSet","App","valueAsString","getItem","newValue","counterTable","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4e08aa3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterSetter\":\"App_counterSetter__3qyn0\",\"counterTable\":\"App_counterTable__17rtR\",\"Counter\":\"App_Counter__3pS7-\",\"ScoreboardRed\":\"App_ScoreboardRed__1o7Xu\",\"ScoreboardBlack\":\"App_ScoreboardBlack__136Ff\",\"totalScore\":\"App_totalScore__LOSit\",\"totalScoreError\":\"App_totalScoreError__2Erwe\",\"errorText\":\"App_errorText__wSv8k\",\"enterText\":\"App_enterText__3kBmI\",\"CounterSetter\":\"App_CounterSetter__wmPeP\",\"Scoreboard\":\"App_Scoreboard__1VCmc\",\"maxValue\":\"App_maxValue__2_cU3\",\"errorMaxValue\":\"App_errorMaxValue__gQiCy\",\"startValue\":\"App_startValue__20166\",\"startValueInput\":\"App_startValueInput__3jSsn\",\"startValueErrorInput\":\"App_startValueErrorInput__3nrls\",\"ButtonsIncAndRes\":\"App_ButtonsIncAndRes__3PZvR\",\"ButtonSet\":\"App_ButtonSet__YgykF\",\"ButtonsContainer\":\"App_ButtonsContainer__2ivBx\",\"button\":\"App_button__Seirl\"};","import React from \"react\";\r\nimport s from './../../App.module.css'\r\n\r\ntype ButtonsType = {\r\n    onClickHandler?: () => void\r\n    disabled?: boolean\r\n    title: string\r\n}\r\n\r\n\r\nexport function Button(props: ButtonsType) {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <button className={s.button}\r\n                        onClick={props.onClickHandler}\r\n                        disabled={props.disabled}\r\n                >{props.title}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export type InitialStateFromCounterType = typeof InitialState\r\n\r\ntype ScoreACType = ReturnType<typeof scoreAC>\r\ntype MessageACType = ReturnType<typeof messageAC>\r\ntype onFocusHandlerACType = ReturnType<typeof onFocusHandlerAC>\r\ntype disIncACType = ReturnType<typeof disIncAC>\r\ntype disResACType = ReturnType<typeof disResAC>\r\ntype styleMessageACType = ReturnType<typeof styleMessageAC>\r\n\r\ntype ActionType = ScoreACType | MessageACType\r\n    | onFocusHandlerACType | disIncACType\r\n    | disResACType | styleMessageACType;\r\n\r\nconst InitialState = {\r\n    message: '',\r\n    score: 0,\r\n    onFocusHandler: false,\r\n    disInc: false,\r\n    disRes: false,\r\n    styleMessage: ''\r\n}\r\n\r\nexport const counterReducer = (state: InitialStateFromCounterType = InitialState, action: ActionType):\r\n    InitialStateFromCounterType => {\r\n    switch (action.type) {\r\n        case 'SCORE':\r\n            return {\r\n                ...state, score: action.score\r\n            }\r\n        case 'MESSAGE':\r\n            return {\r\n                ...state, message: action.message\r\n            }\r\n        case 'ON-FOCUS-HANDLER':\r\n            return {\r\n                ...state, onFocusHandler: action.onFocusHandler\r\n            }\r\n        case 'DISABLE-INC':\r\n            return {\r\n                ...state, disInc: action.disInc\r\n            }\r\n        case 'DISABLE-RES':\r\n            return {\r\n                ...state, disRes: action.disRes\r\n            }\r\n        case 'STYLE-MESSAGE':\r\n            return {\r\n                ...state, styleMessage: action.styleMessage\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const scoreAC = (score: number) => ({type: 'SCORE', score} as const)\r\nexport const messageAC = (message: string) => ({type: 'MESSAGE', message} as const)\r\nexport const onFocusHandlerAC = (onOff: boolean) => ({type: 'ON-FOCUS-HANDLER', onFocusHandler: onOff} as const)\r\nexport const disIncAC = (disInc: boolean) => ({type: 'DISABLE-INC', disInc} as const)\r\nexport const disResAC = (disRes: boolean) => ({type: 'DISABLE-RES', disRes} as const)\r\nexport const styleMessageAC = (styleMessage: string) => ({type: 'STYLE-MESSAGE', styleMessage} as const)","import React, {useEffect} from 'react';\nimport {Button} from '../Button/Button';\nimport s from './../../App.module.css'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../bll/store\";\nimport {\n    disIncAC,\n    disResAC,\n    InitialStateFromCounterType,\n    messageAC,\n    scoreAC,\n    styleMessageAC\n} from \"../../bll/counter-reducer\";\n\n\nfunction Counter() {\n\n    const dispatch = useDispatch()\n\n    const minValue = useSelector<AppRootStateType, number>(state => state.counterSetter.minValue)\n    const maxValue = useSelector<AppRootStateType, number>(state => state.counterSetter.maxValue)\n\n    let {score, message, onFocusHandler, disInc, disRes, styleMessage} =\n        useSelector<AppRootStateType, InitialStateFromCounterType>(state => state.counter)\n\n    const scoreColor = disInc\n        ? s.ScoreboardRed\n        : s.ScoreboardBlack\n\n\n    const incButton = () => {\n        dispatch(scoreAC(score + 1))\n        if (score + 1 === maxValue) {\n            dispatch(disIncAC(true))\n            dispatch(styleMessageAC(s.totalScoreError))\n        }\n        dispatch(disResAC(false))\n    }\n\n    const resetButton = () => {\n        dispatch(scoreAC(minValue))\n        dispatch(disResAC(true))\n        dispatch(disIncAC(false))\n        dispatch(styleMessageAC(s.totalScore))\n    }\n\n    useEffect(() => {\n        if (minValue <= -1 ||\n            maxValue <= minValue ||\n            maxValue <= -1) {\n            dispatch(messageAC('Incorrect value!'))\n            dispatch(styleMessageAC(s.errorText))\n        } else if (onFocusHandler) {\n            dispatch(messageAC('Choose value and press set!'))\n            dispatch(styleMessageAC(s.enterText))\n        } else if (!onFocusHandler) {\n            dispatch(messageAC(JSON.stringify(score)))\n        } else {\n            dispatch(messageAC(JSON.stringify(score)))\n        }\n\n    }, [maxValue, minValue, score, onFocusHandler, styleMessage])\n\n    return (\n        <div className={s.Counter}>\n            <div className={scoreColor}>\n                <span className={styleMessage}>\n                    {message}</span>\n            </div>\n            <div className={s.ButtonsIncAndRes}>\n                <div className={s.ButtonsContainer}>\n                    <div>\n                        <Button\n                            title={'inc'}\n                            onClickHandler={incButton}\n                            disabled={disInc}\n                        />\n                    </div>\n                    <div>\n                        <Button\n                            title={'res'}\n                            onClickHandler={resetButton}\n                            disabled={disRes}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Counter\n","import {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {disIncAC, disResAC, scoreAC} from \"./counter-reducer\";\r\n\r\n\r\nexport type InitialStateFromCounterSetterType = typeof InitialState;\r\n\r\ntype SetMaxValueToLSType = ReturnType<typeof setMaxValueToLSAC>\r\ntype GetMaxValueFromLSType = ReturnType<typeof getMaxValueFromLSAC>\r\ntype SetMinValueToLSType = ReturnType<typeof setMinValueToLSAC>\r\ntype GetMinValueFromLSType = ReturnType<typeof getMinValueFromLSAC>\r\ntype disValueACType = ReturnType<typeof disValueAC>\r\n\r\n\r\ntype ActionType = SetMaxValueToLSType | GetMaxValueFromLSType\r\n    | SetMinValueToLSType | GetMinValueFromLSType\r\n    | disValueACType;\r\n\r\nconst InitialState = {\r\n    maxValue: 0,\r\n    minValue: 0,\r\n    disable: false,\r\n}\r\n\r\nexport const counterSetterReducer = (state: InitialStateFromCounterSetterType = InitialState, action: ActionType):\r\n    InitialStateFromCounterSetterType => {\r\n    switch (action.type) {\r\n        case 'SET-MAX-VALUE-TO-LC':\r\n            return {\r\n                ...state, maxValue: action.maxValue\r\n            }\r\n        case 'GET-MAX-VALUE-FROM-LC':\r\n            return {\r\n                ...state, maxValue: action.maxValue\r\n            }\r\n        case 'SET-MIN-VALUE-TO-LC':\r\n            return {\r\n                ...state, minValue: action.minValue\r\n            }\r\n        case 'GET-MIN-VALUE-FROM-LC':\r\n            return {\r\n                ...state, minValue: action.minValue\r\n            }\r\n        case 'DISABLE':\r\n            return {\r\n                ...state, disable: action.disable\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setMaxValueToLSTC = (maxValue: number) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    let currentValue = getState().counterSetter.maxValue\r\n    let currentTrueValue = currentValue < maxValue ? currentValue + 1 : currentValue - 1\r\n    localStorage.setItem('counterMaxValue', JSON.stringify(currentTrueValue))\r\n    dispatch(setMaxValueToLSAC(maxValue))\r\n}\r\n\r\nexport const getMaxValueFromLSTC = () => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    let valueAsString = localStorage.getItem('counterMaxValue')\r\n    if (valueAsString) {\r\n        let newValue = JSON.parse(valueAsString)\r\n        dispatch(getMaxValueFromLSAC(newValue))\r\n        if (newValue <= -1 || newValue <= getState().counterSetter.minValue) {\r\n            dispatch(disValueAC(true))\r\n            dispatch(disIncAC(true))\r\n            dispatch(disResAC(true))\r\n        }\r\n    }\r\n}\r\n\r\nexport const setMinValueToLSTC = (minValue: number) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    let currentValue = getState().counterSetter.minValue\r\n    let currentTrueValue = currentValue < minValue ? currentValue + 1 : currentValue - 1\r\n    localStorage.setItem('counterMinValue', JSON.stringify(currentTrueValue))\r\n    dispatch(setMinValueToLSAC(minValue))\r\n}\r\n\r\nexport const getMinValueFromLSTC = () => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    let valueAsString = localStorage.getItem('counterMinValue')\r\n    if (valueAsString) {\r\n        let newValue = JSON.parse(valueAsString)\r\n        dispatch(getMinValueFromLSAC(newValue))\r\n        dispatch(scoreAC(newValue))\r\n        if (newValue <= -1 || newValue >= getState().counterSetter.maxValue) {\r\n            dispatch(disValueAC(true))\r\n            dispatch(disIncAC(true))\r\n            dispatch(disResAC(true))\r\n        }\r\n    }\r\n}\r\n\r\nexport const setMaxValueToLSAC = (maxValue: number) => ({type: 'SET-MAX-VALUE-TO-LC', maxValue} as const)\r\nexport const getMaxValueFromLSAC = (maxValue: number) => ({type: 'GET-MAX-VALUE-FROM-LC', maxValue} as const)\r\nexport const setMinValueToLSAC = (minValue: number) => ({type: 'SET-MIN-VALUE-TO-LC', minValue} as const)\r\nexport const getMinValueFromLSAC = (minValue: number) => ({type: 'GET-MIN-VALUE-FROM-LC', minValue} as const)\r\nexport const disValueAC = (disable: boolean) => ({type: 'DISABLE', disable} as const)\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\nimport {Button} from '../Button/Button';\nimport s from './../../App.module.css'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    disValueAC,\n    setMaxValueToLSTC,\n    setMinValueToLSTC\n} from \"../../bll/counterSetter-reducrer\";\nimport {AppRootStateType} from \"../../bll/store\";\nimport {disIncAC, disResAC, messageAC, onFocusHandlerAC, scoreAC, styleMessageAC} from \"../../bll/counter-reducer\";\n\n\nexport function CounterSetter() {\n\n    const dispatch = useDispatch()\n\n    const minValue = useSelector<AppRootStateType, number>(state => state.counterSetter.minValue)\n    const maxValue = useSelector<AppRootStateType, number>(state => state.counterSetter.maxValue)\n    const disable = useSelector<AppRootStateType, boolean>(state => state.counterSetter.disable)\n\n\n    const onFocusMessage = () => {\n        dispatch(onFocusHandlerAC(true))\n        dispatch(disIncAC(true))\n        dispatch(disResAC(true))\n    }\n\n    const onBlurMessage = () => {\n        dispatch(onFocusHandlerAC(false))\n        dispatch(styleMessageAC(s.totalScore))\n        dispatch(scoreAC(minValue))\n        dispatch(disIncAC(true))\n        dispatch(disResAC(true))\n    }\n\n    const minInputStyle = minValue <= -1 ||\n    maxValue <= minValue\n        ? s.startValueErrorInput\n        : s.startValueInput\n\n    const equalValueInputStyle = maxValue <= minValue || maxValue <= -1\n        ? s.errorMaxValue : s.maxValue\n\n    const onChangeMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(setMaxValueToLSTC(JSON.parse(e.currentTarget.value)))\n        dispatch(disValueAC(false))\n        if (JSON.parse(e.currentTarget.value) <= minValue) {\n            dispatch(disIncAC(true))\n            dispatch(disResAC(true))\n            dispatch(disValueAC(true))\n        }\n        if (JSON.parse(e.currentTarget.value) <= -1 || minValue <= -1) {\n            dispatch(disIncAC(true))\n            dispatch(disResAC(true))\n            dispatch(disValueAC(true))\n        }\n    }\n\n    const onChangeMinValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(setMinValueToLSTC(JSON.parse(e.currentTarget.value)))\n        dispatch(disValueAC(false))\n        if (JSON.parse(e.currentTarget.value) <= -1) {\n            dispatch(disIncAC(true))\n            dispatch(disResAC(true))\n            dispatch(disValueAC(true))\n            dispatch(messageAC('Incorrect value!'))\n        }\n        if (JSON.parse(e.currentTarget.value) >= maxValue) {\n            dispatch(disIncAC(true))\n            dispatch(disResAC(true))\n            dispatch(disValueAC(true))\n        }\n    }\n\n\n    function setHandler() {\n        dispatch(disValueAC(true))\n        dispatch(scoreAC(minValue))\n        dispatch(disIncAC(false))\n        dispatch(disResAC(false))\n        dispatch(styleMessageAC(s.totalScore))\n    }\n\n\n    return (\n        <div className={s.CounterSetter}>\n            <div className={s.Scoreboard}>\n                <div>\n                        <span className={equalValueInputStyle}>max value:<input\n                            onFocus={onFocusMessage}\n                            onBlur={onBlurMessage}\n                            type={'number'}\n                            onChange={onChangeMaxValueHandler}\n                            value={maxValue}\n                        /></span>\n                </div>\n                <div>\n                    <span className={s.startValue}>min value:<input\n                        onFocus={onFocusMessage}\n                        onBlur={onBlurMessage}\n                        className={minInputStyle}\n                        type={'number'}\n                        onChange={onChangeMinValueHandler}\n                        value={minValue}\n                    /></span>\n                    <div className={s.ButtonSet}>\n                        <div className={s.ButtonsContainer}>\n                            <Button\n                                title={'set'}\n                                onClickHandler={setHandler}\n                                disabled={disable}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n}\n\n\n","import React, {useEffect} from 'react';\nimport s from './App.module.css'\nimport Counter from \"./components/Counter/Counter\";\nimport {CounterSetter} from \"./components/CounterSetter/CounterSetter\";\nimport {useDispatch} from \"react-redux\";\nimport {getMaxValueFromLSTC, getMinValueFromLSTC} from \"./bll/counterSetter-reducrer\";\nimport {disIncAC, disResAC, styleMessageAC} from \"./bll/counter-reducer\";\n\nfunction App() {\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getMaxValueFromLSTC())\n        dispatch(getMinValueFromLSTC())\n        dispatch(disIncAC(true))\n        dispatch(disResAC(true))\n        dispatch(styleMessageAC(s.totalScore))\n    }, [])\n\n\n    return (\n        <div className={s.counterTable}>\n            <div>\n                <Counter/>\n            </div>\n            <div className={s.counterSetter}>\n                <CounterSetter/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {counterSetterReducer} from \"./counterSetter-reducrer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counterSetter: counterSetterReducer,\r\n    counter: counterReducer,\r\n\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n//getValueFromLocalStorage()\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}